---
title: "Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny"
author: "Sara Acevedo"
format:
  revealjs: 
    theme: serif
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(sf)
library(viridis)
library(geoR)
library(cholera)
library(rgdal)
library(mapview)
library(leaflet)
library(leafsync)
library(tmap)
```

## Plan

El libro se puede encontrar [ac√°](https://www.paulamoraga.com/book-geospatial/index.html)

-   Son 16 cap√≠tulos

-   El club solo contempla los 10 primeros

-   Horario: lunes de 15 a 16 cada dos semanas (1 o 2 cap√≠tulos por sesi√≥n)

## Cap√≠tulo 1: Geospatial health

-   Geospatial health data

-   Disease mapping

-   Communication of results

## Cap√≠tulo 1: Geospatial health data

-   Los datos en salud permiten detectar problemas de salud p√∫blica

-   Mejoran la eficacia en la respuesa y ayudan a prevenir y controlar enfermedades

-   El an√°lisis de datos en salud implica distintos m√©todos, centrados en **patrones** y **conclusiones estad√≠sticas**

-   El an√°lisis espacial usando herramientas SIG juega un papel clave

## Cap√≠tulo 1: Disease mapping

-   El mapeo de enfermedades proporciona una visualizaci√≥n de patrones espaciales de las enfermedades

-   Los mapas resumen zonas de alto riesgo, permiten formular hip√≥tesis y asignar recursos de forma eficaz

-   Usando modelos jer√°rquicos bayesianos se puede estimar el riesgo

## Cap√≠tulo 1: Disease mapping

-   M√©todos bayesianos mencionados son dos:

  1.  Markov chain Monte Carlo **(MCMC)** 
  2.  Integrated nested Laplace approximation **(INLA)**
  
## Cap√≠tulo 1: Disease mapping

-   Estos m√©todos consideran variables y correlaci√≥n espacial, expresando incertidumbre en la estimaci√≥n de riesgo

-   La agregaci√≥n de datos permite confidencialidad (por ejemplo comunas)

-   Datos  y covariables de alta resoluci√≥n permiten realizar estimaciones de riesgo precisas

## Cap√≠tulo 1: Communication of results

-   La **difusi√≥n** de la informaci√≥n en temas de salud es clave

-   R ofrece herramientas de comunicaci√≥n eficaces, como mapas interactivos (leaflet) y gr√°ficos de series temporales (dygraphs)  

-   Permite crear informes reproducibles (RMarkdown ahora **Quarto**), web interactivas (flexdashboard) y aplicaciones web (Shiny)

-   La interpretaci√≥n de estos resultados ayuda a asignar recursos de forma eficiente. 

## Cap√≠tulo 2: Spatial data and R packages for mapping

-   Types of spatial data

-   Coordinate reference systems

-   Shapefiles

-   Making maps with R

## Cap√≠tulo 2: Types of spatial data

Tres caracter√≠sticas: atributo, ubicaci√≥n de la observaci√≥n y el **dominio**

Los tipos de datos seg√∫n el dominio que representan.

1. Areal data üóæ

2. Geostatistical data üåé üìä

3. Point patterns üìç

## Cap√≠tulo 2: Areal data üóæ

El dominio es fijo (de forma regular o irregular) y se divide en un n√∫mero finito de unidades de √°rea con l√≠mites bien definidos. 

## Cap√≠tulo 2: Areal data üóæ

Sudden infant deaths in North Carolina in 1974.

```{r}
nc <- st_read(system.file("shape/nc.shp", package = "sf"),
  quiet = TRUE)

ggplot(data = nc, aes(fill = SID74)) +
  geom_sf() +
  scale_fill_viridis() +
  theme_bw()
```

## Cap√≠tulo 2: Geostatistical data üåé üìä

En los datos geoestad√≠sticos, el dominio es un conjunto fijo continuo. Es importante se√±alar que la continuidad se refiere al dominio, y el atributo puede ser continuo o discreto.

## Cap√≠tulo 2: Geostatistical data

Average rainfall measured at 143 recording stations in Paran√° state, Brazil.
```{r}
ggplot(data.frame(cbind(parana$coords, Rainfall = parana$data)))+
  geom_point(aes(east, north, color = Rainfall), size = 2) +
  coord_fixed(ratio = 1) +
  scale_color_gradient(low = "blue", high = "orange") +
  geom_path(data = data.frame(parana$border), aes(east, north)) +
  theme_bw()
```

## Cap√≠tulo 2: Point patterns üìç

A diferencia de los datos geoestad√≠sticos y de √°rea, el dominio es al azar. 
 
## Cap√≠tulo 2: Point patterns üìç

John Snow‚Äôs map of the 1854 London cholera outbreak
```{r}
rng <- mapRange()
plot(fatalities[, c("x", "y")],
  pch = 15, col = "black",
  cex = 0.5, xlim = rng$x, ylim = rng$y, asp = 1,
  frame.plot = FALSE, axes = FALSE, xlab = "", ylab = ""
)
addRoads()
```

## Cap√≠tulo 2: Coordinate reference systems üåê

-   Se debe conocer en qu√© proyecci√≥n espacial se encuentran los datos. 

-   Las proyecciones est√°n determinadas por un CRS (coordinate reference system).

-   Cada CRS puede estar definido por un EPSG (sigla de European Petroleum Survey Group), se pueden ver [ac√°](https://spatialreference.org/ref/)

-   Si quiero hacer operaciones espaciales, **todas las capas** deben tener el mismo sistema de proyecci√≥n.

## Cap√≠tulo 2: Coordinate reference systems üåê

En Chile, los sistemas de proyecci√≥n m√°s usados son:

1. EPSG:4326: WGS 84
2. EPSG:32719: WGS 84 / UTM zone 19S
3. EPSG:3857: WGS84 Web (Pseudo)Mercator (Auxiliary Sphere)
4. EPSG:24879: PSAD56 / UTM zone 19S

> Estas slides se basaron en la presentaci√≥n de [Stephanie Orellana para Rladies Madrid](https://sporella.github.io/datos_espaciales_madrid)

## Ejemplo libro (modificado)

Se crea un dataframe al azar con long y lat
```{r}
#| echo: true
d <- data.frame(long = rnorm(3, 0, 1), lat = rnorm(3, 0, 1))
d
```

Define las coordenadas
```{r}
#| echo: true
coordinates(d) <- c("long", "lat")
d
```

## Ejemplo libro (modificado)

Asigna una proyecci√≥n (CRS WGS84)
```{r}
#| echo: true
proj4string(d) <- CRS("+proj=longlat +ellps=WGS84
                      +datum=WGS84 +no_defs")
d
```

## Ejemplo libro (modificado)

Reprojecta desde long/lat a UTM zone 35 south
```{r}
#| echo: true
d_new <- spTransform(d, CRS("+proj=utm +zone=35 +ellps=WGS84
                      +datum=WGS84 +units=m +no_defs +south"))
d_new
```

## Ejemplo libro (modificado)

Crea nuevas columnas llamadas UTMx y UTMy
```{r}
#| echo: true
d_new$UTMx <- coordinates(d_new)[, 1]
d_new$UTMy <- coordinates(d_new)[, 2]
```

## Cap√≠tulo 2: Shapefiles üó∫Ô∏è

-   Shapefiles almacenan ubicaci√≥n, forma y atributos de puntos, l√≠neas y pol√≠gonos
-   Un shapefile no es un archivo √∫nico, sino que consiste en una colecci√≥n de archivos relacionados que tienen diferentes extensiones con un nombre com√∫n
-   Un shapefile tiene tres archivos obligatorios con extensiones .shp, .shx y .dbf

## Cap√≠tulo 2: Shapefiles üó∫Ô∏è

En R, podemos leer shapefiles utilizando la funci√≥n readOGR() del paquete rgdal, o tambi√©n la funci√≥n st_read() del paquete sf

:::{.callout-caution}
during October 2023 rgdal, rgeos and maptools will be archived on CRAN, and packages with strong dependencies on the retiring packages must be either upgraded to use sf, terra or other alternatives or work-arounds by or before that time.
:::

## Cap√≠tulo 2: Shapefiles üó∫Ô∏è
```{r}
#| echo: true
nameshp <- system.file("shape/nc.shp", package = "sf")

map <- st_read(nameshp, quiet = TRUE)

class(map)
```

## Cap√≠tulo 2: Shapefiles üó∫Ô∏è
```{r}
#| echo: true
#| warning: false
plot(map)
```
## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è

Los paquetes mas √∫tiles para hacer mapas son

-   ggplot2
-   leaflet
-   mapview
-   tmap

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è

Ac√° usar√© el mismo c√≥digo del libro pero con datos de CEDEUS. Primero cargo los datos
```{r}
#| echo: true
uso_suelo<- read_sf("https://opendata.arcgis.com/datasets/08dea558cea94b64bee9074ed0fbfd4f_0.geojson")

class(uso_suelo) # ya es sf, sino se transforma con st_as_sf() 
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è ggplot2 
```{r}
#| echo: true
ggplot(uso_suelo) + 
  geom_sf(aes(fill = uso_suelo)) +
  theme_bw()
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è ggplot2

Puedo usar escalas de colores definidas
```{r}
#| echo: true
ggplot(uso_suelo) + 
  geom_sf(aes(fill = Shape__Area)) +
  scale_fill_viridis() +
  theme_bw()
```
## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è leaflet

-   Leaflet es una libreria de JavaScript de c√≥digo abierto para mapas interactivos

-   Leaflet requiere una proyecci√≥n espec√≠fica:  EPSG code 4326 

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è leaflet

Revisamos la proyecci√≥n
```{r}
#| echo: true
st_crs(uso_suelo)
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è leaflet

Transformamos a EPSG code 4326 
```{r}
#| echo: true
uso_suelo_leaflet<- st_transform(uso_suelo, 4326)

st_crs(uso_suelo_leaflet)
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è leaflet

```{r}
#| echo: true
pal <- colorNumeric("BrBG", domain = uso_suelo$Shape__Area)
leaflet(uso_suelo_leaflet) %>%
  addTiles() %>%
  addPolygons(
    color = "white", fillColor = ~ pal(Shape__Area),
    fillOpacity = 1
  ) %>%
  addLegend(pal = pal, values = ~Shape__Area, opacity = 1)
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è mapview()

```{r}
#| echo: true

mapview(uso_suelo, zcol = "uso_suelo")

```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è mapview()

Puedo usar escalas de colores de otros paquetes
```{r}
#| echo: true
library(RColorBrewer)
mapview(uso_suelo,
  zcol = "uso_suelo",
  map.types = "CartoDB.DarkMatter",
  col.regions = colorRampPalette(brewer.pal(7, "Paired")) 
)
```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è mapview()

Tiene muchas opciones, por ejemplo mapas al lado de otro
```{r}
#| echo: true
#| 
uso <- mapview(uso_suelo, zcol = "uso_suelo")
area <- mapview(uso_suelo, zcol = "Shape__Area")
mapa <- leafsync::sync(uso, area)
mapa

```

## Cap√≠tulo 2:  Making maps with R üó∫Ô∏è tmap

```{r}
#| echo: true

tm_shape(uso_suelo) +
  tm_polygons("uso_suelo")
```


## Conclusiones

-   Datos de salud ü§ù Datos espaciales
-   Antes de usar los datos: siempre revisar proyecci√≥n üåê
-   Revisar paquetes y su documentaci√≥n (rgdal y rgeos ü•∂)

